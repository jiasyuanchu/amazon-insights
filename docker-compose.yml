version: '3.8'

services:
  # PostgreSQL Master Database
  postgres:
    image: postgres:14-alpine
    container_name: amazon-insights-db
    environment:
      POSTGRES_DB: amazon_insights
      POSTGRES_USER: amazon_insights
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - amazon-insights-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U amazon_insights -d amazon_insights"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PostgreSQL Read Replica (Optional)
  postgres-replica:
    image: postgres:14-alpine
    container_name: amazon-insights-db-replica
    environment:
      POSTGRES_DB: amazon_insights
      POSTGRES_USER: amazon_insights
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      PGUSER: postgres
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - amazon-insights-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - replica
    restart: unless-stopped

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: amazon-insights-redis
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
      - ./database/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - amazon-insights-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Main API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: amazon-insights-api
    environment:
      DATABASE_URL: postgresql://amazon_insights:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/amazon_insights
      DATABASE_URL_REPLICA: postgresql://amazon_insights:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres-replica:5432/amazon_insights
      REDIS_URL: redis://redis:6379/0
      FIRECRAWL_API_KEY: ${FIRECRAWL_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      API_KEY_REQUIRED: "true"
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-change-this-secret-key-in-production}
      CACHE_ENABLED: "true"
      ENVIRONMENT: ${ENVIRONMENT:-production}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8001:8001"
    networks:
      - amazon-insights-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Celery Workers for Background Tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: amazon-insights-worker
    environment:
      DATABASE_URL: postgresql://amazon_insights:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/amazon_insights
      REDIS_URL: redis://redis:6379/0
      FIRECRAWL_API_KEY: ${FIRECRAWL_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      CELERY_WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-4}
    volumes:
      - ./logs:/app/logs
    networks:
      - amazon-insights-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Celery Beat Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: scheduler
    container_name: amazon-insights-scheduler
    environment:
      DATABASE_URL: postgresql://amazon_insights:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/amazon_insights
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
    networks:
      - amazon-insights-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Frontend Dashboard
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: amazon-insights-frontend
    environment:
      API_BASE_URL: http://api:8001
      NODE_ENV: production
    ports:
      - "8080:8080"
    networks:
      - amazon-insights-network
    depends_on:
      - api
    restart: unless-stopped

  # NGINX Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: amazon-insights-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - amazon-insights-network
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    profiles:
      - production

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: amazon-insights-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - amazon-insights-network
    profiles:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: amazon-insights-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - amazon-insights-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
    restart: unless-stopped

  # PgBouncer Connection Pooler
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: amazon-insights-pgbouncer
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_USER: amazon_insights
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      DATABASES_DBNAME: amazon_insights
      POOL_MODE: transaction
      DEFAULT_POOL_SIZE: 25
      MAX_CLIENT_CONN: 1000
    ports:
      - "6432:6432"
    networks:
      - amazon-insights-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - production
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  amazon-insights-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16